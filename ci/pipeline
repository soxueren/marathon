#!/usr/bin/env amm

// Get a logging backend into classpath.
import $ivy.`org.slf4j:slf4j-simple:1.7.25`

import ammonite.ops._
import ammonite.ops.ImplicitWd._
import java.util.concurrent.TimeUnit
import scala.concurrent.duration._
import scala.util.control.NonFatal
import scala.util.Try

import $file.awsClient
import $file.dataDogClient
import $file.dcos
import $file.fileUtil
import $file.githubClient
import $file.provision
import $file.releases
import $file.upgrade
import $file.utils

import releases.ReleaseTarget
import utils.{SemVer, SemVerRead}
import utils.BranchType
import utils.BranchType._


val PACKAGE_DIR: Path = pwd / 'target / 'universal
val PACKAGE_DOCS_DIR: Path = pwd / 'target / "universal-docs"

/**
 * Compile Marathon and run unit, integration tests.
 *
 * @param logFileName Name of file which collects logs.
 */
@main
def compileAndTest(logFileName: String): Unit = utils.stage("Compile and Test") {

  def run(cmd: String *) = utils.runWithTimeout(30.minutes, logFileName)(cmd)
  def runIn(workDirectory: Path)(cmd: String *) = utils.runWithTimeout(5.minutes, logFileName, workDirectory)(cmd)

  // Run type-generator compilation before anything else.
  runIn(pwd / "type-generator")("sbt", "compile")

  run("sbt", "clean", "integration/clean", "compile", "test:compile", "integration/test:compile")

  checkUnusedImports(logFileName)

  run("sbt", "test", "integration/test")

  // Check leaked processes after integration tests
  checkLeakedProcesses()

  // Compile other projects.
  run("sbt", "benchmark/compile")
  run("sbt", "mesos-simulation/compile")
  run("sbt", "plugin-interface/compile")

  // Check system integration tests.
  checkSystemIntegrationTests(logFileName)
}

/**
 * Checks for leaked processes and fails the build if any found.
 */
@main
def checkLeakedProcesses(): Unit = {
    val leaks = provision.leakedProcesses()
    assert(leaks.isEmpty, s"Found leaked processes:\n${leaks.mkString("\n")}")
}

@main
def checkUnusedImports(logFileName: String): Unit = {
  val logs = read! pwd / logFileName
  val unusedImportMatch = """.*\.scala:\d+:\d+: Unused import.*\n.*import.*\n.*\^""".r
  val unusedImports = unusedImportMatch.findAllIn(logs).toVector

  assert(unusedImports.isEmpty, s"Found unused imports:\n${unusedImports.mkString("\n")}")
}

@main
def checkSystemIntegrationTests(logFileName: String): Unit = {
  def run(cmd: String *) = utils.runWithTimeout(30.minutes, logFileName)(cmd)
  run("flake8", "--count", "--max-line-length=120", "tests/system", "tests/integration/src/test/resources/python")
}

/**
 * Compresses sandboxes and logs.
 *
 * @param logFileName Name of log file.
 * @param sandboxFileName The start of the file name for the sandboxes archive.
 */
@main
def zipLogs(logFileName: String = "ci.log", sandboxFileName: String = "sandboxes"): Unit = {
  Try(%("tar", "--exclude=provisioner", "-zcf", s"$sandboxFileName.tar.gz", "sandboxes", "tests/integration/sandboxes"))
  Try(%('sudo, "rm", "-rf", "sandboxes", "tests/integration/sandboxes"))
  Try(%("tar", "-zcf", s"$logFileName.tar.gz", "--remove-files", logFileName))
}

/**
 * Upload Marathon tgz tarballs, its sha1 checksum and docs to S3.
 *
 * @param version The version to upload.
 * @param buildLocation subfolder location to upload tarball to. Example: "builds"
 * @return Artifact description if it was uploaded.
 */
def uploadTarballPackagesToS3(version: SemVer, buildLocation: String): Option[awsClient.Artifact] = utils.stage("Upload Tarball Packages") {
  import scala.collection.breakOut

  // Upload docs
  PACKAGE_DOCS_DIR.toIO.listFiles.filter(f => f.getName.endsWith(".tgz"))
    .headOption.foreach(file => awsClient.upload(Path(file), awsClient.s3PathFor(buildLocation)))

  // Upload Marathon
  val maybeArtifact = PACKAGE_DIR.toIO.listFiles.filter(f => f.getName.endsWith(".tgz"))
    .headOption.flatMap(file => awsClient.archiveArtifact(Path(file), awsClient.s3PathFor(buildLocation)))

  // Upload dcos packages
  PACKAGE_DIR.toIO.listFiles.filter(f => f.getName.endsWith(".dcos"))
    .headOption.flatMap(file => awsClient.archiveArtifact(Path(file), awsClient.s3PathFor(buildLocation)))

  maybeArtifact
}

/**
 * Creates the tarball files of the Marathon runnable package with their
 * associated sha1 and the tarball of the documentation with the RAML definitions.
 *
 * @return version of build.
 */
def createTarballPackages(): SemVer = utils.stage("Package Tarballs") {
  val result = %%('sbt, "universal:packageZipTarball", "universal-docs:packageZipTarball")

  val version = %%("./version").out.string.trim
  val gitSha = %%("./version", "commit").out.string.trim

  println(s"Built tarballs for Marathon $version.")
  SemVer(version, gitSha)
}

/**
 * The pipeline target for GitHub pull request builds. It wraps other targets
 * and does some additional reporting to GitHub.
 */
def asPullRequest(pullId: String)(run: => (SemVer, Option[awsClient.Artifact])): Unit = {
  val buildUrl: String = sys.env.getOrElse("BUILD_URL", throw new IllegalArgumentException("No BUILD_URL was defined."))
  val buildTag: String = sys.env.getOrElse("BUILD_TAG", "here")

  try {
    githubClient.reject(pullId, buildUrl, buildTag)
    val (_, maybeArtifact) = run
    githubClient.reportSuccess(pullId, buildUrl, buildTag, maybeArtifact)
  } catch {
    case NonFatal(e) =>
      githubClient.reportFailure(pullId, buildUrl, buildTag, e.getMessage())
      throw e
  }
}

/**
 * Provision the build host.
 */
def provisionHost(): Unit = utils.stage("Provision") {
  // Set port range for random port 0 allocation.
  %('sudo, "ci/set_port_range.sh")

  provision.killStaleTestProcesses()
  provision.installMesos()
  provision.installDcosCli()
}

//////////////////// MAIN TARGETS ////////////////////

/**
 * Run the main build pipeline.
 *
 * @return Version of Marathon build
 */
@main
def build(runTests: Boolean = true, buildName: String = "run"): SemVer = {
  if (runTests) {
    val logFileName = s"$buildName.log"
    val sandboxFile = s"$buildName.sandboxes"
    try {
      compileAndTest(logFileName)
    } finally {
      zipLogs(logFileName, sandboxFile)    // Try to archive ci and sandbox logs in any case
    }
  }

  createTarballPackages()
}

/**
  * Builds docker and linux native packages, then runs the tests in tests/package/test.sc
  */
@main
def buildDockerAndLinuxPackages(): Unit = {
  utils.stage("Package Docker Image, Debian and RedHat Packages") {
    %('sbt, "docker:publishLocal")

    val toolPath = pwd/'tools/'packager
    %('make, "clean")(toolPath)
    %('make, "all", "-j")(toolPath)
  }
}

def testDockerAndLinuxPackages(): Unit = {
  utils.stage("Testing Docker Image, Debian and RedHat Packages") {
    // create test-bed docker images and run the package tests
    val testPath = pwd/'tests/'package
    %('make, "clean")(testPath)
    %('make, "test", "-j")(testPath)
  }
}

/**
 * Update DC/OS repository and triggers build of update DC/OS image.
 *
 * @param version The newly built Marathon version.
 * @param artifactUrl Url for the saved Marathon artifact.
 * @param sha1 The sah1 checksum of the artifact.
 */
@main
def updateDcosImage(version: SemVer, artifactUrl: String, sha1: String): Unit = utils.stage("Patch DC/OS Branch") {
  upgrade.updateMarathon(artifactUrl, sha1, s"Update Marathon to $version")
  upgrade.updateMarathonEE(artifactUrl, sha1, s"Update Marathon to $version")
}

/*******************************************************************************
 *******************************  BUILD TARGETS  *******************************
 ******************************************************************************/

/**
 * Build target for master and potential release branches.
 */
@main
def buildMaster(): Unit = {
  provisionHost()

  val buildNumber = sys.env.get("BUILD_NUMBER").getOrElse("0")
  val version = build(buildName = s"master-$buildNumber")
  buildDockerAndLinuxPackages()
  testDockerAndLinuxPackages()
  // dcos.buildRegistry(version) The packaging is broken on master https://jira.mesosphere.com/browse/MARATHON-8442.

  // Uploads
  val maybeArtifact = uploadTarballPackagesToS3(version, s"builds/$version")
  maybeArtifact.foreach { artifact =>
    updateDcosImage(version, artifact.downloadUrl, artifact.sha1)
  }
}

/**
 * Build target for release branches.
 */
@main
def buildReleaseBranch(releaseVersion: String): Unit = {
  provisionHost()

  val buildNumber = sys.env.get("BUILD_NUMBER").getOrElse("0")
  val version = build(buildName = s"releases-$releaseVersion-$buildNumber")
  buildDockerAndLinuxPackages()
  testDockerAndLinuxPackages()

  // Uploads
  val maybeArtifact = uploadTarballPackagesToS3(version, s"builds/$version")
}

/**
 * Build target for pull request builds.
 */
@main
def buildPr(pullId: String): Unit = asPullRequest(pullId) {
  provisionHost()
  val buildNumber = sys.env.get("BUILD_NUMBER").getOrElse("0")
  val version = build(buildName = s"PR-$pullId-$buildNumber")

  // Uploads
  val artifact = uploadTarballPackagesToS3(version, s"builds/$version")
  (version, artifact)
}

/**
 * Build target for our build loop.
 */
@main
def loop(): Unit = {
  val start = System.currentTimeMillis
  try {
    provisionHost()
    build(buildName = utils.loopBuildName())
    dataDogClient.reportCount(s"marathon.build.${utils.loopName}.success", 1)
  } catch {
    case ex =>
      dataDogClient.reportCount(s"marathon.build.${utils.loopName}.failure", 1)
      throw ex
  } finally {
    dataDogClient.reportCount(s"marathon.build.${utils.loopName}.duration", ((System.currentTimeMillis - start) / 1000).toInt)
  }
}

/**
 * The main pipeline target for builds on Jenkins.
 *
 * @return Version and artifact description of Marathon build.
 */
@main
def jenkins(): Unit = {
  val jobName = utils.getJobName()
  BranchType(jobName) match {
    case Some(Master) => buildMaster()
    case Some(PR(pullId)) => buildPr(pullId)
    case Some(Release(version)) => buildReleaseBranch(version)
    case _ =>
      println(s"Unknown job type $jobName - must be master build, release branch or PR build.")
      sys.exit(1)
  }
}

/**
 * Executes the Community Release which includes:
 *
 *  1. tarball with version details
 *  2. release of docker with that version
 *  3. git tag of version (pushed to server)
 *
 * @param requestVersion The version attempting to be released v1.4.6
 * @param gitSha The git commit sha.  This can be shorthand (ex. 0e1)
 * @param latest Boolean to indicat if the Docker latest should be updated to this version.
 * @return Version and artifact description of Marathon build.
 */
@main
def release(args: String*): Unit = {

  val config = releases.parser.parse(args, releases.Config()).getOrElse {
    sys.exit(1)
    ???
  }

  println(s"Releasing build ${config.version}...")
  releases.verify(config.version)

  %('git, "checkout", config.version.commit)

  val targets = config.targets.toSet

  build(config.runTests)
  buildDockerAndLinuxPackages()
  if (config.runTests)
    testDockerAndLinuxPackages()

  targets.foreach {
    case ReleaseTarget.S3Package =>
      releases.copyTarballBuildsToReleases(config.version)
    case ReleaseTarget.LinuxPackages =>
      releases.uploadLinuxPackagesToRepos(config.version.toTagString)
    case ReleaseTarget.DockerTag =>
      %('docker, "push", s"mesosphere/marathon:${config.version.toTagString}")
    case ReleaseTarget.DockerLatest =>
      %('docker, "tag", s"mesosphere/marathon:${config.version.toTagString}", "mesosphere/marathon:latest")
      %('docker, "push", "mesosphere/marathon:latest")
    case ReleaseTarget.JARArtifact =>
      // publishing to the nexus repository.  This artifact is used by metronome.
      %('sbt, "publish")
    case ReleaseTarget.PluginInterface =>
      %('sbt, "plugin-interface/publish")
  }

  githubClient.tag(config.version.commit, config.version.toTagString)
}
